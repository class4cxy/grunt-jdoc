
/*
 * grunt-jdoc
 * by jdo
 * Copyright (c) 2015 alloyteam
 * Licensed under the MIT license.
 */

'use strict';

// plugin

module.exports = function (grunt) {

    var Slice = Array.prototype.slice;
    var rDocFeature = /\s*\/\*\*([\s\S]*?)\*\//g;
    var rCommField = /\s*\*\s*@([\w.-_]*)\s*(for?\s[\w.-_]*)?\s*([^\n]*)\n/g;
    // var rFieldFeature = /\s*\*\s*@([\w.-_]*)s*({[\w.-_]*})?\s*([\w.-_]*)?\s*([^\s]*)/g;
    // 特殊解析字段 - 索引
    var rSpecialField = ['param', 'example'];
    // 特殊解析字段
    var rSpecialFieldFeature = [
        // param
        {
            exp: /\s*\*\s*@param\s*{([\w.-_]*)}\s*(\[?[\w.-_]*\]?)([^\n]*)?/g,
            factory: function (holder, all, type, field, tx) {
                // 可选标识
                var optional = false;
                if ( field.indexOf('[') === 0 ) {
                    optional = true;
                    field = field
                        .replace('[', '')
                        .replace(']', '')
                }
                holder.push({
                    key: 'param',
                    field: field,
                    type: type,
                    optional: optional,
                    desc: tx
                });
            }
        },
        // example
        {
            exp: /\s*\*\s*@example[^\n]+([^@]+)/g,
            factory: function (holder, all, code) {
                holder.push({
                    key: 'example',
                    field: code.replace(/\*\s/g, '').replace(/\s$/g, '')
                })
            }
        }
    ];
    var docJSON = {};
    // 工厂索引
    var docIndexFactory = [
        // 方法
        'function',
        // 名字空间
        'namespace',
        // 事件
        'event'
    ]
    var tmpMethod = {};
    // var tmpFields = {};
    var docPath = './docs';

    grunt.registerMultiTask('jdoc', 'Replace text patterns with applause.', function () {

        function matchDocFeature (filepath) {
            // reset regular lastIndex
            var content = grunt.file.read(filepath);

            if ( content ) {
                // grunt.log.writeln(content)
                content.replace(rDocFeature, function (all, doc) {
                    if ( doc ) {

                        var fields = [];
                        // var module;
                        var factory;
                        var index;

                        // grunt.log.writeln(doc)
                        // 通用字段匹配
                        doc.replace(rCommField, function (all, key, belong, field) {
                            // grunt.log.writeln('dododo ----- ')
                            // grunt.log.writeln(belong)
                            key = key.replace(/\r/, '');
                            field = field.replace(/\r/, '');
                            
                            if ( key && rSpecialField.indexOf(key) === -1 ) {

                                fields.push({
                                    key: key,
                                    field: field,
                                    belong: belong ? belong.replace('for ', '') : ''
                                });

                                if ( docIndexFactory.indexOf(key) > -1 ) {
                                    factory = key;
                                    index = field;
                                }
                            }
                        });

                        // 特殊字段匹配
                        rSpecialFieldFeature.forEach(function (item) {
                            // grunt.log.writeln(tx)
                            doc.replace(item.exp, function () {
                                var args = Slice.call(arguments, 0);
                                // inset holder
                                args.unshift(fields);
                                // grunt.log.writeflags(fields)
                                item.factory.apply(null, args)
                            })
                        });

                        // grunt.log.writeln(JSON.stringify(fields))
                        if ( factory ) Factory['$'+factory](index, fields);
                        // grunt.log.writeln(JSON.stringify(docJSON));
                    }
                })
            }

            // if ( index ) docJSON[index] = fields;
            // grunt.log.writeflags(docJSON);
        }

        var Factory = {
            // 处理函数类
            $function  : function (fn, prop) {
                // 检查是否为空间
                if ( fn ) {
                    var re = {detail: prop};
                    var handler, n;
                    var last = fn.lastIndexOf('.');
                    // 存在名字空间，转移到`$namespace`处理
                    if ( last > -1 ) {
                        handler = this.$namespace(fn.substring(0, last)).property;
                        n = fn.substr(last+1);
                    } else {
                        handler = docJSON;
                        n = fn;
                    }
                    handler[n] = re;
                }
            },

            // 处理名字空间
            $namespace : function (ns, prop) {
                var arr = ns.split('.');
                var root = docJSON;
                var len = arr.length - 1;
                // var last = arr.pop();
                arr.forEach(function(a, i) {
                    if ( !root[a] ) root[a] = {
                        property : {}
                    };
                    // grunt.log.writeln(typeof i)
                    if ( len === i ) {
                        if ( prop ) root[a].detail = prop;
                        else root = root[a];
                    } else {
                        root = root[a].property;
                    }
                });
                return root;
            },

            // 处理事件类型注释
            $event : function (eventname, prop) {
                // 检查是否为空间
                if ( eventname ) {
                    var re = {detail:prop};
                    var last = eventname.lastIndexOf('.');
                    var handler, n;
                    // 存在名字空间，转移到`$namespace`处理
                    if ( last > -1 ) {
                        handler = this.$namespace(eventname.substring(0, last));
                        n = eventname.substr(last+1);
                    } else {
                        handler = docJSON;
                        n = eventname;
                    }

                    if ( !handler.event ) handler.event = {};
                    handler.event[n] = re;
                    // return re;
                }
            }
        }

        /**
         * 创建名字空间
         * @param  {String} name
         * @param  {Object} space
         * @param  {Function|Object|Array|String} factory
         */
        function createNameSpace(name, space, factory) {
            var arr = name.split('.');
            var len = arr.length-1;
            // var last = arr.pop();
            arr.forEach(function(a, i) {
                if ( len === i ) {
                    space[a] = factory;
                    return;
                }
                if ( !space[a] ) space[a] = {
                    property : {}
                };
                space = space[a].property;
            });
            return space;
        }

        function handleMethod () {

            if ( docJSON ) {
                // var space = tmpMethod;
                for ( var i in docJSON) {

                    createNameSpace(i, tmpMethod, docJSON[i]);
                }
                docJSON = tmpMethod;
            }
        }

        // 递归整合相同key到同一数组中
        function handleFields (root, space) {

            root = root || docJSON;
            var tmp = space ? root[space] : root;
            var singleField = ['method', 'desc', 'namespace'];
            // array
            if ( tmp.length && tmp.forEach ) {

                var tmpFields = {};
                // 通用处理
                tmp.forEach(function (item) {
                    if ( singleField.indexOf(item.key) > -1 ) {
                        tmpFields[item.key] = item.field;
                    } else {
                        tmpFields[item.key] = tmp.filter(function (field) {
                            return field.key === item.key ? true : false;
                        });
                    }
                });

                // rewrite
                if ( space ) {
                    // grunt.log.writeln(space);
                    handleParamTree(tmpFields);
                    handleFieldsTree(tmpFields);
                    root[space] = tmpFields;
                }

            // object
            } else {
                for ( var i in tmp ) {
                    handleFields(tmp, i)
                }
            }
        }

        /**
         * 创建`param`层级化关系
         * @param  {String} field 所属字段名
         * @param  {Object} space 所属层级
         * @param  {Object} factory 附属工厂
         */
        function handleParamBelong (field, names, space, factory) {

            var curr = names.shift();
            if ( curr ) {
                // 如果参数下级为空，创建一个新的，用于给下面插入
                if ( space.length === 0 ) {
                    space[0] = {
                        field : curr
                    }
                }
                space.forEach(function (item) {
                    // grunt.log.writeflags(item)
                    if ( item && item.field === curr ) {

                        if ( !item[field] ) {
                            item[field] = [];
                        }
                        if ( names.length === 1 ) {
                            // fix `field` for `param`
                            factory.field = names.shift();

                            item[field].push(factory)
                        } else {
                            handleParamBelong(field, names, item[field], factory);
                        }
                    }
                });
            }
        }

        // 参数层级化
        function handleParamTree (api) {
            var params = api.param;
            if ( params && params.length ) {
                /*for ( var i = params.length-1; i >= 0; i-- ) {
                    // grunt.log.writeln(len)
                    var param = params[i];
                    // grunt.log.writeflags(param)
                    // callback.result -> ['callback', 'result']
                    var paramNames = param.field.split('.');
                    if ( paramNames && paramNames.length > 1 ) {
                        // 先清除之前的
                        params.splice(i, 1);
                        // params[k] = null;
                        // grunt.log.writeln(i)
                        handleParamBelong('param', paramNames, params, param)
                    }
                }*/
                params.forEach(function (param, k) {
                    // callback.result -> ['callback', 'result']
                    var paramNames = param.field.split('.');
                    if ( paramNames && paramNames.length > 1 ) {
                        // 先清除之前的引用
                        params[k] = null;
                        handleParamBelong('param', paramNames, params, param)
                    }
                });
                // clean empty param
                api.param = params.filter(function (param) {
                    return param ? true : false;
                });
            }
        }

        /**
         * 创建其他字段层级化关系
         * @param  {String} field 所属字段名
         * @param  {Object} space 所属层级
         * @param  {Object} factory 附属工厂
         */
        function handleFieldBelong (field, names, space, factory) {

            var curr = names.shift();
            if ( curr ) {
                space.forEach(function (item) {
                    if ( item && item.field === curr ) {
                        if ( names.length === 0 ) {
                            if ( !item[field] ) {
                                item[field] = [];
                            }
                            item[field].push(factory)
                        } else if ( item.param ) {
                            handleFieldBelong(field, names, item.param, factory);
                        }
                    }
                });
            }
        }

        // 其他字段层级化 `note` `support` `importent` etc
        function handleFieldsTree (api) {
            // 排除名单
            var ex = ['method', 'desc', 'param', 'example'];
            if ( api && typeof api === 'object' ) {
                for ( var i in api ) {
                    if ( ex.indexOf(i) === -1 ) {
                    // grunt.log.writeln(i)
                        var field = api[i];
                        // grunt.log.writeflags(field)
                        if ( field && field.length ) {
                            for ( var m = field.length-1; m >= 0; m -- ) {
                                var item = field[m];
                                if ( item.belong ) {
                                    // grunt.log.writeln(item.belong.split('.'))
                                    // field[k] = null;
                                    field.splice(m, 1);
                                    handleFieldBelong(i, item.belong.split('.'), api.param, item)
                                }
                            }
                        }
                        /*field && field.forEach && field.forEach(function (item, k){
                            if ( item.belong ) {
                                // grunt.log.writeln(item.belong.split('.'))
                                field[k] = null;
                                handleFieldBelong(i, item.belong.split('.'), api.param, item)
                            }
                        })*/
                    }
                }
            }
        }

        function buildJSONFile () {
            if (!grunt.file.exists(docPath)) {
                grunt.file.mkdir(docPath);
            }
            grunt.file.write(docPath+'/doc.json', JSON.stringify(docJSON));
        }



        grunt.log.writeln('初始化标识解析...');
        this.files.forEach(function (file) {
            // grunt.log.writeflags(filePair);
            file.src.filter(function(filepath) {
                // Remove nonexistent files (it's up to you to filter or warn here).
                if (!grunt.file.exists(filepath)) {
                    grunt.log.warn('Source file "' + filepath + '" not found.');
                    return false;
                } else {
                    return true;
                }
            }).forEach(matchDocFeature);
        });

        // grunt.log.writeln('接口层级处理...');
        // handleMethod();
        grunt.log.writeln('参数归类处理...');
        handleFields();
        // grunt.log.writeln(JSON.stringify(docJSON));
        grunt.log.writeln('文件生成');
        buildJSONFile();
        grunt.log.writeln('完成！');

    });
};
